"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HMAC = exports.H = exports.randomBytes = void 0;
let randomBytes;
exports.randomBytes = randomBytes;
let H;
exports.H = H;
let HMAC;
exports.HMAC = HMAC;
if (typeof crypto === "undefined") {
    const nodeCrypto = require("crypto");
    exports.randomBytes = randomBytes = (size) => {
        return new Promise((resolve, reject) => {
            nodeCrypto.randomBytes(size, (err, buf) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(buf);
                }
            });
        });
    };
    exports.H = H = async (msg) => {
        const sign = nodeCrypto.createHash("sha256");
        sign.update(msg);
        return sign.digest();
    };
    exports.HMAC = HMAC = async (key, msg) => {
        const hm = nodeCrypto.createHmac("sha256", key);
        hm.update(msg);
        return hm.digest();
    };
}
else {
    exports.randomBytes = randomBytes = async (size) => {
        return crypto.getRandomValues(new Uint8Array(size));
    };
    exports.H = H = async (msg) => {
        return new Uint8Array(await crypto.subtle.digest("SHA-256", msg));
    };
    exports.HMAC = HMAC = async (key, msg) => {
        return new Uint8Array(await crypto.subtle.sign("HMAC", await crypto.subtle.importKey("raw", key, {
            name: "HMAC",
            hash: { name: "SHA-256" }
        }, false, ["sign"]), msg));
    };
}
