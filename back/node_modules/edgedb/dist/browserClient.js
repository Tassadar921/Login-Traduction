"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHttpClient = exports.createClient = exports.FetchClientPool = void 0;
const baseClient_1 = require("./baseClient");
const conUtils_1 = require("./conUtils");
const errors_1 = require("./errors");
const fetchConn_1 = require("./fetchConn");
const options_1 = require("./options");
const parseConnectArguments = (0, conUtils_1.getConnectArgumentsParser)(null);
class FetchClientPool extends baseClient_1.BaseClientPool {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "isStateless", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "_connectWithTimeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: fetchConn_1.FetchConnection.connectWithTimeout
        });
    }
}
exports.FetchClientPool = FetchClientPool;
function createClient() {
    throw new errors_1.EdgeDBError(`'createClient()' cannot be used in browser (or edge runtime) environment, ` +
        `use 'createHttpClient()' API instead`);
}
exports.createClient = createClient;
function createHttpClient(options) {
    return new baseClient_1.Client(new FetchClientPool(parseConnectArguments, typeof options === "string" ? { dsn: options } : options !== null && options !== void 0 ? options : {}), options_1.Options.defaults());
}
exports.createHttpClient = createHttpClient;
